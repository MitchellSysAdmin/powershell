#	• Description: This script checks for inactive user accounts (no logon for a specified number of days) and users with passwords nearing expiry. It generates a report and outputs it to the console.
#	• Usage: Use this script to manage user accounts by identifying inactive users and proactively notifying users with upcoming password expirations. This can also be set up to send email alerts.

# Define Inactivity Threshold (in days) and Password Expiry Threshold (in days)
$InactivityThreshold = 30
$PasswordExpiryThreshold = 15

# Get All User Accounts
$Users = Get-ADUser -Filter * -Properties LastLogonDate, PasswordLastSet

# Check for Inactive Users
$InactiveUsers = $Users | Where-Object { ($_.LastLogonDate -lt (Get-Date).AddDays(-$InactivityThreshold)) -or $_.LastLogonDate -eq $null }

# Check for Password Expiry
$PasswordExpiringSoonUsers = $Users | Where-Object { ($_.PasswordLastSet -lt (Get-Date).AddDays(-($PasswordExpiryThreshold))) -and ($_.Enabled -eq $true) }

# Generate Reports
$InactiveUsersReport = $InactiveUsers | Select-Object Name, LastLogonDate
$PasswordExpiringSoonUsersReport = $PasswordExpiringSoonUsers | Select-Object Name, PasswordLastSet

# Output Inactive Users Report
Write-Host "Inactive Users (No login in the last $InactivityThreshold days):" -ForegroundColor Red
$InactiveUsersReport | Format-Table -Property Name, LastLogonDate

# Output Password Expiry Report
Write-Host "Users with Password Expiry in the Next $PasswordExpiryThreshold Days:" -ForegroundColor Yellow
$PasswordExpiringSoonUsersReport | Format-Table -Property Name, PasswordLastSet

# Optionally, Export to CSV
$InactiveUsersReport | Export-Csv -Path "C:\Reports\InactiveUsers_$(Get-Date -Format 'yyyyMMdd').csv" -NoTypeInformation
$PasswordExpiringSoonUsersReport | Export-Csv -Path "C:\Reports\ExpiringPasswords_$(Get-Date -Format 'yyyyMMdd').csv" -NoTypeInformation
